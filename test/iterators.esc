
effect iter<a> {
  yield(a)
}

function map(i: r ! iter<a>, f: a -> b ! e): r ! iter<b> ! e {
  handle i() {
    case yield(a), k: yield(f(a)) k("unit")
    case done(r): r
  }
}

function sum(i: r ! iter<int> ! e): int ! e {
  handle i() {
    case yield(x), k: x + k("unit")
    case done(r): 0
  }
}

function sum_acc(i: r ! iter<int> ! e): int ! e {
  handle i(), 0 {
    case yield(x), k, acc: k("unit", x + acc)
    case done(r), acc: acc
  }
}


function onetwo() {
  yield(1)
  yield(2)
}

function incr(x) {
  x + 1
}

function main() {
  sum({map(onetwo, incr)})
}

