effect exception {
  raise(s : string): a
}
function safediv(x, y) {
  switch y {
    case 0 : raise("oops")
    case _ : x / y
  }
}
type Maybe<A> {
  Nothing
  Just(A)
}
function to_maybe(program) {
  handle program() {
    case raise(s), resume: Nothing
    case done(x): Just(x)
  }
}

function catch(program, hanterare) {
  handle program() {
    case raise(s), resume: hanterare(s)
    case done(x): x
  }
}
type Pair<a, b> {
  Pair(a, b)
}
function main() {
  Pair(
    to_maybe(() => { safediv(4, 0) }),
    catch(() => { safediv(4, 0) }, s => 123)
  )
}
