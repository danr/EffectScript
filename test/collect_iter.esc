
effect iter<a> {
  yield(a)
  flip(): bool
  done_iter(string)
}

effect state<a> {
  get(): a
  set(a)
  done_state(string)
}

function inc() {
  set(get() + 1)
}


type list<a> {
  Cons(a, list<a>)
  Nil
}

type Pair<a, b> {
  Pair(a, b)
}


type Bool {
  False
  True
}

function append<a>(xs: list<a>, ys: list<a>): list<a> {
  switch xs {
    case Cons(u,us): Cons(u,append(us,ys))
    case Nil: ys
  }
}

function state<a>(s0: a, i: r ! state<a> ! e): r ! e {
  handle i(), s0 {
    case get(k), s: k(s, s)
    case set(s, k), _: k("unit", s)
    case done(r), s: Pair(s, r)
  }
}

function collect<a, e, r>(i: r ! iter<a> ! e): list<a> ! e {
  handle i() {
    case yield(x, k): puts("Yielding: " + show(x)); Cons(x, k("unit"))
    case flip(k): append(k(False), k(True))
    case done(_): Nil()
  }
}

function main() {
  p = () => {
    //yield(404)
    switch flip() {
      case False: puts("In false branch now") inc() yield(1+get())
      case True: puts("In true branch now") yield(0)
    }
    //yield(2)
    u = get()
    yield(u)
    //puts("Called get: " + show(u))
    inc()
    puts("End of p")
  }
  //puts("Done")

  //puts(show(state(100, () => { collect(p) })))
  //puts("Done")
  //puts(show(state(100, () => { collect({ yield(1) }) })))
  //state(100, () => { collect(p) })
  collect(() => state(100, p))

}

