
effect iter<a> {
  yield(a): string
}

function walk(i: r ! iter<int> ! e): int ! e {
  handle i() {
    case yield(x), k:
      "\nbegin " + show(x) +
      k(" first " + show(x)) +
      "\nmiddle " + show(x) +
      k(" second " + show(x)) +
      "\nend " + show(x)
    case done(r): "\ndone:" + r
  }
}

function onetwo() {
  yield(1) + yield(2) + " onetwo done"
}

function main() {
  walk(onetwo)
}


