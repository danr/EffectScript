# Good old map

data List a where
    cons(a, List a)
    nil

def map(f: a -> <e> b, xs: List a) -> <e> List b:
    case xs of
        cons(y,ys) => cons(f(y), map(f, ys))
        nil => nil

def sum(xs: List int) -> int:
    case xs of
        cons(y,ys) => y + sum(ys)
        nil => 0

data unit where
    unit

effect io where
    print_int(int) -> <io> unit

def main() -> <io> unit:
    print_int(sum(map(def (x): { print_int(x); x + 1 }, cons(1, cons(2, nil)))))

