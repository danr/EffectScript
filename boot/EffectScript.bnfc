comment "//";
comment "/*" "*/";

Program. Program::= [Decl];

separator Case "";
separator Con "";
separator Decl "";
separator Name ",";
separator nonempty Type ",";
separator TypeParam ",";
separator Param ",";

Algebraic. Decl ::= "type" DeclHead "{" [Con] "}";
Effect.    Decl ::= "effect" DeclHead "{" [Con] "}";
Alias.     Decl ::= "alias" DeclHead "=" Type;
Expr.      Decl ::= Expr3;
Let.       Decl ::= Expr14 "=" Expr3;
_.         Decl ::= Decl ";";

Nul.   Con ::= Name OptType;
NulEx. Con ::= NameK [Name] ">" OptType;
Con.   Con ::= NameP [TypeParam] ")" OptType;
ConEx. Con ::= NameK [Name] ">(" [TypeParam] ")" OptType;
_.     Con ::= Con ";";

Function.  Expr14 ::= "function" FunctionHead ")" OptType "{" [Decl] "}";
Lit.       Expr14 ::= Lit;
NameMono.  Expr14 ::= Name;
NamePoly.  Expr14 ::= NameK [Type] ">";
WildP.     Expr14 ::= "_";

Handle.    Expr14 ::= "handle" [Expr4] "{" [Case] "}";
Switch.    Expr14 ::= "switch" [Expr4] "{" [Case] "}";

separator Expr4 ",";

Call.      Expr14 ::= NameP [Expr] ")";
CallTy.    Expr14 ::= NameK [Type] ">(" [Expr] ")";
Apply.     Expr14 ::= "(" Expr ")(" [Expr] ")";
ApplyT.    Expr14 ::= "(" Expr ")<" [Type] ">";
ApplyTE.   Expr14 ::= "(" Expr ")<" [Type] ">(" [Expr] ")";
separator nonempty Expr ")(";

Mul.  Expr8  ::= Expr8 "*"  Expr9;
Div.  Expr8  ::= Expr8 "/"  Expr9;
Mod.  Expr8  ::= Expr8 "%"  Expr9;
Add.  Expr7  ::= Expr7 "+"  Expr8;
Sub.  Expr7  ::= Expr7 "-"  Expr8;
Eq.   Expr5  ::= Expr6 "==" Expr6;
Ne.   Expr5  ::= Expr6 "!=" Expr6;
Lt.   Expr5  ::= Expr6 "<"  Expr6;
Le.   Expr5  ::= Expr6 "<=" Expr6;
Gt.   Expr5  ::= Expr6 ">"  Expr6;
Ge.   Expr5  ::= Expr6 ">=" Expr6;

Signature. Expr4  ::= Expr4 ":" Type;
Lambda.    Expr3  ::= Expr12 "=>" Expr3;
Lambda0.   Expr3  ::= "{" [Decl] "}";
Comma.     Expr2  ::= Expr3 "," Expr2 ;
Unit.      Expr2  ::= ;


_.   Expr   ::= Expr1 ;
_.   Expr1  ::= Expr2 ;
_.   Expr2  ::= Expr3 ;
_.   Expr3  ::= Expr4 ;
_.   Expr4  ::= Expr5 ;
_.   Expr5  ::= Expr6 ;
_.   Expr6  ::= Expr7 ;
_.   Expr7  ::= Expr8 ;
_.   Expr8  ::= Expr9 ;
_.   Expr9  ::= Expr10 ;
_.   Expr10 ::= Expr11 ;
_.   Expr11 ::= Expr12 ;
_.   Expr12 ::= Expr13 ;
_.   Expr13 ::= Expr14 ;
Par. Expr14 ::= "(" Expr  ")" ;

Integer. Lit ::= Integer;
String.  Lit ::= String;

separator Expr14 ",";

Case. Case ::= "case" [Expr14] ":" [Decl];

NameTy.    Type3 ::= Name ;
AppTy.     Type3 ::= NameK [Type] ">" ;
ArrTy.     Type1 ::= Type2 "->" Type1;
ArrTys.    Type1 ::= "(" [Type] ")" "->" Type1;
Bang.      Type2 ::= Type2 "!" Type3;
BangOnly.  Type2 ::= "!" Type3;
UnitTy.    Type3 ::= "(" ")";

coercions Type 3;

NoType. OptType ::= ;
Type.   OptType ::= ":" Type;

MonoHead. DeclHead ::= Name;
PolyHead. DeclHead ::= NameK [Name] ">";

Param.          Param ::= Expr14;
ParamWithType.  Param ::= Expr14 ":" Type;

Anonymous.        FunctionHead ::= "(" [Param] ;
MonoFunctionHead. FunctionHead ::= NameP [Param] ;
PolyFunctionHead. FunctionHead ::= NameK [Name] ">(" [Param] ;

OnlyType.  TypeParam ::= Type;
WithName.  TypeParam ::= Name ":" Type;

position token Name (letter)(letter|digit|["!@$_-?/'"])*;
position token NameP (letter)(letter|digit|["!@$_-?/'"])*(["("]);
position token NameK (letter)(letter|digit|["!@$_-?/'"])*(["<"]);
