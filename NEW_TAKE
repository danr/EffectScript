
    [[ G |- e : t | effs ]]

v ::= \ x . e
    | c
    | l v v      -- the data

t ::= 0 | base | a -> b ! effs

effs ::= () | eff ; effs

eff ::= (l(t): t, ..., l(t): t)

e ::= let x = e in e
   |  case v of l x y -> e; ...; l x y -> e
   |  v
   |  v(v, ..,  v)
   |  do l v      -- the operation
   |  next eff v

[[ A | effs ]] = H effs -> (H effs -> [[ A ]] -> 0) -> 0

[[ A -> B ! effs ]] = [[ A ]] ~glue~> [[ B | effs ]]

[[ let x = v in e2 ]h|k] = let x = v in [[ e2 ]h|k]

[[ let x = e1 in e2 ]h|k] = [[ e1 ]h|\ h1 x -> [[ e2 ]h1|k]]

[[ f(x1, .., xn) ]h|k] = f(x1, .., xn, h, k)

[[ do l x ]] = \ h k -> (h ! l) (\ kN -> kN (h - l&co) l(v,k))

[[ x ]|h|k] = x

[[ \ x1 .. xn . e ]] = \ (x1,...,xn,h,k) -> [[ e ]h|k]

x : Unit -> H (eff + effs) -> (H (eff + effs) -> 0 -> 0) -> 0

[[ next eff x ]] : H effs -> (H effs -> L(eff) -> 0) -> 0
= \ h k -> x Unit (h + (l, k)) (\ h x -> k (h - done&co) (done(x))



       x : Unit -> 0 ! eff + effs
____________________________________________
    next eff x : L(eff) | effs


















optimisations?

[[ A | () ]] = A
